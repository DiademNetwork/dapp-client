// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UserItem renders without crashing 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <UserItem
    user={
      Object {
        "userAccount": "",
        "userName": "",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <WithStyles(Avatar)>
          <pure(PermIdentityOutlinedIcon) />
        </WithStyles(Avatar)>,
        <WithStyles(ListItemText)
          primary={
            Array [
              <WithStyles(Typography)
                color="textSecondary"
              >
                
              </WithStyles(Typography)>,
              <WithStyles(Typography)>
                
              </WithStyles(Typography)>,
            ]
          }
        />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <pure(PermIdentityOutlinedIcon) />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "primary": Array [
            <WithStyles(Typography)
              color="textSecondary"
            >
              
            </WithStyles(Typography)>,
            <WithStyles(Typography)>
              
            </WithStyles(Typography)>,
          ],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <WithStyles(Avatar)>
            <pure(PermIdentityOutlinedIcon) />
          </WithStyles(Avatar)>,
          <WithStyles(ListItemText)
            primary={
              Array [
                <WithStyles(Typography)
                  color="textSecondary"
                >
                  
                </WithStyles(Typography)>,
                <WithStyles(Typography)>
                  
                </WithStyles(Typography)>,
              ]
            }
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <pure(PermIdentityOutlinedIcon) />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "primary": Array [
              <WithStyles(Typography)
                color="textSecondary"
              >
                
              </WithStyles(Typography)>,
              <WithStyles(Typography)>
                
              </WithStyles(Typography)>,
            ],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
