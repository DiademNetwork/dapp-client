version: 2.0

references:

  environment: &environment
    environment:
      SUPPORT_CONTACT_EMAIL: "team@diadem.network"

  main_config: &main_config
    working_directory: ~/tmp
    docker:
      - image: circleci/node:10
        <<: *environment

  restore_repo: &restore_repo
    restore_cache:
      keys:
        - v1-repo-{{ .Branch }}-{{ .Revision }}
        - v1-repo-{{ .Branch }}
        - v1-repo

  npm_cache_key: &npm_cache_key
    v1-dependency-npm-{{ checksum "package.json" }}

  npm_backup_cache_key: &npm_backup_cache_key
    v1-dependency-npm

  restore_node_modules: &restore_node_modules
    restore_cache:
      keys:
        - *npm_cache_key
        - *npm_backup_cache_key

  github_ssh_keys: &github_ssh_keys
    add_ssh_keys:
      fingerprints:
        - "69:8e:db:91:55:2a:f0:cf:15:9e:ad:40:6e:98:95:1e"
  
  add_known_host_github: &add_known_host_github
    run:
      name: Keyscan Github (HACK)
      command: ssh-keyscan -H github.com >> ~/.ssh/known_hosts

  filter_branch_master: &filter_branch_master
    filters:
      branches:
        only:
          - master

jobs:
  checkout_code:
    <<: *main_config
    steps:
      - *restore_repo
      - checkout
      - save_cache:
          key: v1-repo-{{ .Branch }}-{{ .Revision }}
          paths:
            - .
  npm_dependencies:
    <<: *main_config
    steps:
      - *restore_repo
      - *restore_node_modules
      - run:
          name: Install NPM dependencies
          command: |
            if [ ! -d node_modules ]; then
              set -exu
              yarn install
            fi
      - save_cache:
          key: *npm_cache_key
          paths:
            - node_modules

  lint_and_unit_tests:
    <<: *main_config
    steps:
      - *restore_repo
      - *restore_node_modules
      - run:
          name: Lint check
          command: yarn lint
      - run:
          name: Unit tests
          command: yarn test

  deploy_staging:
    <<: *main_config
    steps:
      - *restore_repo
      - *restore_node_modules
      - *github_ssh_keys
      - *add_known_host_github
      - run:
          name: Build & Deploy Staging
          command: |
            export BACKEND_URL="${BACKEND_URL_STAGING}"
            export GETSTREAM_APP_KEY="${GETSTREAM_APP_KEY_STAGING}"
            export GETSTREAM_APP_ID="${GETSTREAM_APP_ID_STAGING}"
            export GETSTREAM_ACHIEVEMENT_COMMON_TOKEN="${GETSTREAM_ACHIEVEMENT_COMMON_TOKEN_STAGING}"
            export SUPPORT_CONTACT_EMAIL="${SUPPORT_CONTACT_EMAIL}"
            export NODE_ENV="staging"
            git config --global user.email ${GH_EMAIL}
            git config --global user.name ${GH_NAME}
            yarn deploy

  # UNCOMMENT WHEN REAL STAGING/PRODUCTION LOGIC IS IMPLEMENTED
  # deploy_production:
  #   <<: *main_config
  #   steps:
  #   - *restore_repo
  #   - *restore_node_modules
  #   - *github_ssh_keys
  #   - *add_known_host_github
  #   - run:
  #       name: Build & Deploy Production
  #       command: |
  #         export BACKEND_URL="${BACKEND_URL_PRODUCTION}"
  #         export GETSTREAM_APP_KEY="${GETSTREAM_APP_KEY_PRODUCTION}"
  #         export GETSTREAM_APP_ID="${GETSTREAM_APP_ID_PRODUCTION}"
  #         export GETSTREAM_ACHIEVEMENT_COMMON_TOKEN="${GETSTREAM_ACHIEVEMENT_COMMON_TOKEN_PRODUCTION}"
  #         export SUPPORT_CONTACT_EMAIL="${SUPPORT_CONTACT_EMAIL}"
  #         export NODE_ENV="production"
  #         git config --global user.email ${GH_EMAIL}
  #         git config --global user.name ${GH_NAME}
  #         yarn deploy

workflows:
  version: 2
  deploy:
    jobs:
      - checkout_code

      - npm_dependencies:
          requires:
            - checkout_code

      - lint_and_unit_tests:
          requires:
            - checkout_code
            - npm_dependencies

      - deploy_staging:
          <<: *filter_branch_master
          requires:
            - checkout_code
            - npm_dependencies
            - lint_and_unit_tests

      # UNCOMMENT WHEN REAL STAGING/PRODUCTION LOGIC IS IMPLEMENTED
      # - deploy_production_hold:
      #     <<: *filter_out_branch_gh_pages
      #     << : *filter_branch_master
      #     type: approval
      #     requires:
      #       - checkout_code
      #       - npm_dependencies
      #       - lint_and_unit_tests
      #       - deploy_staging

      # - deploy_production:
      #     # << : *filter_branch_master
      #     <<: *filter_out_branch_gh_pages
      #     requires:
      #       - deploy_production_hold